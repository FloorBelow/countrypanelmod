# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@pop_type_table_row_height = 28

types countrypanelmod_population_culture_types {

	type countrypanelmod_culture_table = flowcontainer {
		direction = vertical

		#header
		flowcontainer = {
			#widget = {
			#	size = { 120 @pop_type_table_row_height}
			#}


			widget = {
				size = { 148 @pop_type_table_row_height}
				sort_button = {
					visible = "[Not(GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'c'))]"
					size = { 100% 100% }
					onclick = "[GetVariableSystem.Set('countrypanelmod_culture_table_sort', 'c')]"
					text = "[concept_culture]"
				}
				countrypanelmod_sort_button_pressed = {
					visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'c')]"
					size = { 100% 100% }
					text = "[concept_culture]"
				}
			}

			widget = {
				size = { 60 @pop_type_table_row_height}
				sort_button = {
					size = { 100% 100% }
					visible = "[Not(GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'p'))]"
					onclick = "[GetVariableSystem.Set('countrypanelmod_culture_table_sort', 'p')]"
					tooltip = "POPULATION_TOOLTIP"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
				countrypanelmod_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'p')]"
					tooltip = "POPULATION_TOOLTIP"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}

			widget = {
				size = { 60 @pop_type_table_row_height}

				sort_button = {
					size = { 100% 100% }
					visible = "[Not(GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 's'))]"
					onclick = "[GetVariableSystem.Set('countrypanelmod_culture_table_sort', 's')]"
					tooltip = "POLITICAL_STRENGTH_TITLE"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}

				countrypanelmod_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 's')]"
					tooltip = "POLITICAL_STRENGTH_TITLE"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}

			}


			widget = {
				size = { 44 @pop_type_table_row_height}
				sort_button = {
					size = { 100% 100% }
					visible = "[Not(GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'r'))]"
					tooltip = "MAJORITY_RELIGION_TITLE"
					onclick = "[GetVariableSystem.Set('countrypanelmod_culture_table_sort', 'r')]"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_religion.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
				countrypanelmod_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'r')]"
					tooltip = "MAJORITY_RELIGION_TITLE"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_religion.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}


			widget = {
				size = { 43 @pop_type_table_row_height}
				sort_button = {
					enabled = no
					size =  { 100% 100% }
					#onclick = "[Country.SortCultures('turmoil')]"
					tooltip = "TURMOIL_TITLE"
				}
				icon = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_turmoil.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}




		}

		#expanded
		flowcontainer = {
			visible = "[GetVariableSystem.Exists('countrypanelmod_culture_table_expand')]"
			direction = vertical

			#population (default)
			dynamicgridbox = {
				visible = "[Or(Not(GetVariableSystem.Exists('countrypanelmod_culture_table_sort')),GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'p'))]"
				datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
				item = {
					countrypanelmod_culture_row = {}
				}
			}

			#pol str
			flowcontainer = {
				direction = vertical
				visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 's')]"
				dynamicgridbox = {
					datamodel = "[Country.AccessPopCulturesSortedByPolStr]"
					item = {
						countrypanelmod_culture_row = {}
					}
				}
				dynamicgridbox = {
					datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[EqualTo_int64(Culture.GetPolStr(Country.Self),'(int64)0')]"
						}
					}
				}
			}

			#culture
			flowcontainer = {
				direction = vertical
				visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'c')]"

				dynamicgridbox = {
					datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[Culture.IsPrimaryCultureIn(Country.Self)]"
						}
					}
				}
				dynamicgridbox = {
					datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[Not(Or(Culture.IsPrimaryCultureIn(Country.Self),Culture.IsDiscriminatedIn(Country.Self)))]"
						}
					}
				}
				dynamicgridbox = {
					datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
						}
					}
				}
			}

			#religion
			dynamicgridbox = {
				visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'r')]"
				datamodel = "[Country.AccessPopReligionsSortedByPopulation]"
				item = {
					dynamicgridbox = {
						datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
						item = {
							countrypanelmod_culture_row = {
								visible = "[EqualTo_string(Culture.GetReligion.GetNameNoFormatting, Religion.GetNameNoFormatting)]"
							}
						}
					}
				}
			}

			button = {
				visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopCultures),Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
				size = { 100% @pop_type_table_row_height }
				using = default_button
				text = "SHOW_LESS"
				onclick = "[GetVariableSystem.Toggle( 'countrypanelmod_culture_table_expand' )]"
			}
		}


		#non-expanded
		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('countrypanelmod_culture_table_expand'))]"
			direction = vertical

			#population (default)
			dynamicgridbox = {
				visible = "[Or(Not(GetVariableSystem.Exists('countrypanelmod_culture_table_sort')),GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'p'))]"
				datamodel = "[DataModelFirst(Country.AccessPopCulturesSortedByPopulation, Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
				item = {
					countrypanelmod_culture_row = {}
				}
			}

			#pol str
			flowcontainer = {
				direction = vertical
				visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 's')]"

				dynamicgridbox = {
					datamodel = "[DataModelFirst(Country.AccessPopCulturesSortedByPolStr, Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
					item = {
						countrypanelmod_culture_row = {}
					}
				}

				dynamicgridbox = {
					visible = "[And(LessThan_int32(GetDataModelSize(Country.AccessPopCulturesSortedByPolStr),Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes)))),LessThan_int32(GetDataModelSize(Country.AccessPopCulturesSortedByPolStr),GetDataModelSize(Country.AccessPopCultures)))]"
					datamodel = "[DataModelFirst(Country.AccessPopCulturesSortedByPopulation, Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[EqualTo_int64(Culture.GetPolStr(Country.Self),'(int64)0')]"
						}
					}
				}
			}


			#culture
			flowcontainer = {
				direction = vertical
				visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'c')]"
				dynamicgridbox = {
					datamodel = "[DataModelFirst(Country.AccessPopCulturesSortedByPopulation, Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[Culture.IsPrimaryCultureIn(Country.Self)]"
						}
					}
				}
				dynamicgridbox = {
					datamodel = "[DataModelFirst(Country.AccessPopCulturesSortedByPopulation, Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[Not(Or(Culture.IsPrimaryCultureIn(Country.Self),Culture.IsDiscriminatedIn(Country.Self)))]"
						}
					}
				}
				dynamicgridbox = {
					datamodel = "[DataModelFirst(Country.AccessPopCulturesSortedByPopulation, Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
					item = {
						countrypanelmod_culture_row = {
							visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
						}
					}
				}
			}


			#religion
			dynamicgridbox = {
				visible = "[GetVariableSystem.HasValue('countrypanelmod_culture_table_sort', 'r')]"
				datamodel = "[Country.AccessPopReligionsSortedByPopulation]"
				item = {
					dynamicgridbox = {
						#visible = "[Not(Religion.IsDiscriminatedIn(Country.Self))]"
						datamodel = "[DataModelFirst(Country.AccessPopCulturesSortedByPopulation, Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
						item = {
							countrypanelmod_culture_row = {
								visible = "[EqualTo_string(Culture.GetReligion.GetNameNoFormatting, Religion.GetNameNoFormatting)]"
							}
						}
					}
				}
			}


			button = {
				visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopCultures),Subtract_int32('(int32)26',Max_int32('(int32)13',GetDataModelSize(Country.AccessPopTypes))))]"
				size = { 100% @pop_type_table_row_height }
				using = default_button
				text = "SHOW_MORE"
				onclick = "[GetVariableSystem.Toggle( 'countrypanelmod_culture_table_expand' )]"
			}
		}
	}


	type countrypanelmod_culture_row = widget {
		size = { 355 @pop_type_table_row_height }

		parentanchor = top

		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .42 .31 .28 1 }
			alpha = 0.4
		}
		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			#visible = "[Not(Culture.IsDiscriminatedIn(Country.Self)))]"
			visible = "[Not(Or(Culture.IsDiscriminatedIn(Country.Self), Culture.IsPrimaryCultureIn(Country.Self)))]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .39 .46 .56 1 }
			alpha = 0.4
		}
		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			visible = "[Culture.IsPrimaryCultureIn(Country.Self)]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .58 .52 .40 1 }
			alpha = 0.5
		}

		divider_clean = {
			#visible = no
			position = { 0 1 }
			size = { 98% 1 }
			parentanchor = bottom|hcenter
			alpha = 0.5
		}


		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			widget = {
				size = { @pop_type_table_row_height @pop_type_table_row_height }

				background = {
					using = simple_frame
				}

				icon = {
					parentanchor = center
					texture = "/gfx/interface/piechart/piechart_legend.dds"
					position = { 0.5 0.5 }
					size = { 25 25 }
					color = "[Culture.GetColor]"
				}
			}




			widget = {
				size = { 120 @pop_type_table_row_height }



				hbox = {
					#margin_left = 10
					widget = {
						#visible = no
						size = { 24 24 }

						icon = {
							visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
							texture = "gfx/interface/icons/generic_icons/discriminated_icon.dds"
							size = { 20 20 }
							parentanchor = center
						}

						icon = {
							visible = "[Not(Culture.IsDiscriminatedIn(Country.Self))]"
							texture = "gfx/interface/icons/generic_icons/accepted_icon.dds"
							size = { 22 22 }
							parentanchor = center
						}



					}



					textbox = {
						size = { -1 -1 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						#parentanchor = left|vcenter
						align = nobaseline
						#margin_right = 10
						fontsize_min = 14
						default_format = "#tooltippable_name"
						text = "[Culture.GetNameNoFormatting]"

						elide = right
						tooltipwidget = {
							countrypanelmod_FancyTooltip_Culture = {}
						}
					}

				}


			}

			textbox = {
				size = { 60 @pop_type_table_row_height }
				tooltip = "COUNTRYPANELMOD_CULTURE_POPULATION_TOOLTIP"
				margin_right = 8
				align = right|nobaseline
				text = "[Culture.GetPopulation(Country.Self)|d]"
			}

			widget = {
				size = { 60 @pop_type_table_row_height }

				textbox = {
					size = { 100% 100% }
					tooltip = "COUNTRYPANELMOD_CULTURE_POL_STR_TOOLTIP"
					visible = "[GreaterThanOrEqualTo_CFixedPoint(Culture.GetPolStrAsPercentage(Country.Self),'(CFixedPoint)0.01')]"
					text = "[Culture.GetPolStrAsPercentage(Country.Self)|v/%d]"
					align = center|nobaseline
				}
				textbox = {
					visible = "[LessThan_CFixedPoint(Culture.GetPolStrAsPercentage(Country.Self),'(CFixedPoint)0.01')]"
					parentanchor = center
					align = center|nobaseline
					raw_text = "-"
					autoresize = yes
				}


			}

			widget = {
				size = { -1 @pop_type_table_row_height }
				layoutpolicy_horizontal = expanding

				background = {
					visible = no
					spriteType = Corneredstretched
					#margin = { 2 2 }
					spriteborder = { 0 0 }
					texture = "gfx/interface/backgrounds/rounded_bg.dds"
					#texture_density = 2


					modify_texture = {
						texture = "gfx/interface/backgrounds/default_bg_shading.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = multiply
						alpha = 0.5
					}

				}

				datacontext = "[Culture.GetReligion]"

				tooltipwidget = {
					countrypanelmod_FancyTooltip_Religion = {}
				}


				countrypanelmod_religion_icon = {
					parentanchor = center
					size = { 22 22 }
				}
			}


			textbox = {
				size = { -1 @pop_type_table_row_height }
				layoutpolicy_horizontal = expanding
				margin_right = 8

				align = right|nobaseline
				text = "[Culture.CalcTurmoilInCountry(Country.Self)|%0n]"


				tooltip = "COUNTRYPANELMOD_CULTURE_TURMOIL_TOOLTIP"
			}


		}

	}


	type countrypanelmod_religion_button = 	button  {
		parentanchor = center
		size = { 30 28 }
		datacontext =  "[Culture.GetReligion]"
		using = default_button

		tooltipwidget = {
			countrypanelmod_FancyTooltip_Religion = {
			}
		}

		countrypanelmod_religion_icon = {
			parentanchor = center
		}



	}

	type countrypanelmod_religion_icon = widget {
		size = { 22 22 }

		icon = {
			parentanchor = center
			size = { 100% 100% }
			position = { 2 2 }
			texture = "[Religion.GetTexture]"
			alpha = 0.6
			modify_texture = {
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				texture = "gfx/interface/icons/generic_icons/black_box.dds"
				blend_mode = normal
				#alpha = 0.2
			}
		}



		icon = {
			#visible = no
			parentanchor = center
			size = { 100% 100% }
			texture = "[Religion.GetTexture]"

			modify_texture = {
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				texture = "gfx/interface/backgrounds/white.dds"
				blend_mode = normal
				color = "[Religion.GetColor]"
				#alpha = 0.2
			}

			modify_texture = {
				texture = "gfx/interface/buttons/default_button_texture.dds"
				spriteType = Corneredtiled
				texture_density = 2
				spriteborder = { 0 0 }
				blend_mode = overlay
				alpha = 2
			}


			modify_texture = {
				texture = "gfx/interface/backgrounds/default_bg_shading.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = add
				#alpha = 1.2
			}

		}

		icon = {
			#visible = no
			parentanchor = center
			size = { 100% 100% }
			texture = "[Religion.GetTexture]"
			alpha = 0.1

			modify_texture = {
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				texture = "gfx/interface/backgrounds/white.dds"
				blend_mode = normal
				color = { 0.7 0.7 0.7 1}
				alpha = 1
			}

			#modify_texture = {
			#	texture = "gfx/interface/buttons/default_button_texture.dds"
			#	spriteType = Corneredtiled
			#	texture_density = 2
			#	spriteborder = { 0 0 }
			#	blend_mode = overlay
			#	alpha = 2
			#}

			modify_texture = {
				using = texture_velvet
				alpha = 5
			}

		}

		icon = {
			#visible = no
			parentanchor = center
			size = { 100% 100% }
			texture = "[Religion.GetTexture]"
			alpha = 0.4

		}

	}



	type countrypanelmod_culture_smallchart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
		}

		blockoverride "heading" {
			text = "[concept_culture]"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_CULTURE_POPULATION_PIECHART"
		}

		blockoverride "pieslice" {
			value = "[Culture.GetPopulationAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Culture.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}
	}

	type countrypanelmod_culture_pol_str_smallchart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopCulturesSortedByPolStr]"
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_CULTURE_POL_STR_PIECHART"
		}

		blockoverride "pieslice" {
			value = "[Culture.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Culture.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}
	}




	type countrypanelmod_religion_smallchart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopReligionsSortedByPopulation]"
		}

		blockoverride "heading" {
			text = "[concept_religion]"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_RELIGION_POPULATION_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[Religion.GetPopulationAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Religion.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenReligionInfoPanel(Religion.AccessSelf)]"
			}
		}

	}

	type countrypanelmod_religion_pol_str_smallchart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopReligionsSortedByPolStr]"
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_RELIGION_POL_STR_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[Religion.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Religion.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenReligionInfoPanel(Religion.AccessSelf)]"
			}
		}

	}


	type countrypanelmod_FancyTooltip_Culture = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "COUNTRYPANELMOD_DATA_CULTURE_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[Culture.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CULTURE"
		}
	}

	type countrypanelmod_FancyTooltip_Religion = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "COUNTRYPANELMOD_DATA_RELIGION_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[Religion.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_RELIGION"
		}
		blockoverride "icon_texture" {
			texture = "[Religion.GetTexture]"
		}
	}

}