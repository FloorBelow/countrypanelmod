# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@pop_type_table_row_height = 27

types countrypanelmod_population_pop_type_types {

	#MINIMIZED CHART SECTION
	type countrypanelmod_pop_type_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPopulation), '(int32)3')]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.AccessPopTypesSortedOnPopulation)]"
			}
			blockoverride "text" {
				text = "NO_CULTURES"
			}
		}

		blockoverride "heading" {
			text = "[concept_profession]"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_POP_TYPE_POPULATION_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPopulationAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}

		blockoverride "leftside_info" {
			default_format = "#tooltippable_name"
			text = "[PopType.GetNameNoFormatting]"
			tooltipwidget = {
				countrypanelmod_FancyTooltip_PopType = {
				}
			}
		}

		blockoverride "rightside1_info" {
			text = "[PopType.GetPopulationAsPercentage(Country.Self)|v/%d]"
		}

		blockoverride "rightside2_info" {
			raw_text = "([PopType.GetPopulation(Country.Self)|D])"
		}

		blockoverride "maxverticalslots" {
			maxverticalslots = 3
		}
	}

	type countrypanelmod_pop_type_pol_str_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPolStr), '(int32)3')]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.AccessPopTypesSortedOnPolStr)]"
			}
			blockoverride "text" {
				text = "NO_CULTURES"
			}
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_POP_TYPE_POL_STR_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}

		blockoverride "leftside_info" {
			default_format = "#tooltippable_name"
			text = "[PopType.GetNameNoFormatting]"
			tooltipwidget = {
				countrypanelmod_FancyTooltip_PopType = {
				}
			}
		}

		blockoverride "rightside1_info" {
			text = "[PopType.GetPolStrAsPercentage(Country.Self)|v/%d]"
		}

		blockoverride "rightside2_info" {
			raw_text = "([PopType.GetPolStr(Country.Self)|K])"
		}

		blockoverride "maxverticalslots" {
			maxverticalslots = 3
		}
	}


	#POP TYPE CHARTS
	type countrypanelmod_pop_type_smallchart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPopulation), '(int32)3')]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.AccessPopTypesSortedOnPopulation)]"
			}
			blockoverride "text" {
				text = "NO_POP_TYPES"
			}
		}

		blockoverride "heading" {
			text = "[concept_profession]"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_POP_TYPE_POPULATION_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPopulationAsFloat(Country.Self)]"
		}
		
		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type countrypanelmod_pop_type_pol_str_smallchart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPolStr), '(int32)3')]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.AccessPopTypesSortedOnPopulation)]"
			}
			blockoverride "text" {
				text = "NO_POP_TYPES_POL_STR"
			}
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "COUNTRYPANELMOD_POP_TYPE_POL_STR_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type countrypanelmod_smallchart = container {
		onmousehierarchyenter = "[PdxGuiWidget.FindChild('chart_button').InterruptThenTriggerAnimation('hide_chart_button','show_chart_button')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('chart_button').InterruptThenTriggerAnimation('show_chart_button','hide_chart_button')]"
		alwaystransparent = no

		flowcontainer = {
			block = "chart_visible" {}
			direction = vertical
			spacing = 5
			margin = { 8 5 }

			block "minimumsize" {

			}

			block "background" {
				background = {
				}
			}

			block "title" {
				textbox = {
					using = default_list_position
					size = { 120 20 }
					align = hcenter|nobaseline
					default_format = "#title"

					block "heading" {
						raw_text = "#todo heading#!"
					}
				}
			}
			v3_piechart = {
				visible = "[GetVariableSystem.Exists('piecharts')]"

				block "tree_chart_size" {}
			}
			v3_treemapchart  = {
				visible = "[Not(GetVariableSystem.Exists('piecharts'))]"

				block "tree_chart_size" {}
			}

		}

		widget = {
			name = "chart_button"
			block = "chart_visible" {}
			parentanchor = right|top
			size = { 30 30 }

			block "chart_button_position" {
				position = { 15 20 }
			}

			state = {
				name = hide_chart_button
				trigger_on_create = yes
				alpha = 0
				duration = 0.2
			}

			state = {
				name = show_chart_button
				alpha = 1
				duration = 0.15
			}

			# grid/list toggle
			button_icon_round_toggle = {
				size = { 29 29 }
				parentanchor = right|vcenter
				block "chart_button_button_position" {
					position = { -10 0 }
				}	

				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('piecharts')]"
				}
				blockoverride "view_1" {
					visible = "[Not(GetVariableSystem.Exists('piecharts'))]"
				}
				blockoverride "view_2" {
					visible = "[GetVariableSystem.Exists('piecharts')]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/piecharts.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/areacharts.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "TOOLTIP_VIEW_LIST"
				}
				blockoverride "tooltip_2" {
					tooltip = "TOOLTIP_VIEW_GRID"
				}
			}
		}
	}

	#POP TYPE TABLE
	type countrypanelmod_pop_type_table = flowcontainer {
		direction = vertical

		flowcontainer = {
			#widget = {
			#	size = { 120 @pop_type_table_row_height}
			#}
			sort_button = {
				#enabled = no
				visible = "[Not(GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 't'))]"
				size = { 145 @pop_type_table_row_height}
				onclick = "[GetVariableSystem.Set('countrypanelmod_pop_type_table_sort', 't' )]"
				text = "[concept_profession]"
			}
			sort_button = {
				visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 't')]"
				size = { 145 @pop_type_table_row_height}
				onclick = "[GetVariableSystem.Set('countrypanelmod_pop_type_table_sort', 't-' )]"
				text = "[concept_profession]"
			}
			sort_button = {
				visible = "[Not(GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 'p'))]"
				size = { 60 @pop_type_table_row_height}
				onclick = "[GetVariableSystem.Set('countrypanelmod_pop_type_table_sort', 'p' )]"
				tooltip = "POPULATION_TOOLTIP"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
			sort_button = {
				visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 'p')]"
				size = { 60 @pop_type_table_row_height}
				onclick = "[GetVariableSystem.Set('countrypanelmod_pop_type_table_sort', 'p-' )]"
				tooltip = "POPULATION_TOOLTIP"

				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
			sort_button = {
				visible = "[Not(GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 's'))]"
				size = { 60 @pop_type_table_row_height}
				onclick = "[GetVariableSystem.Set('countrypanelmod_pop_type_table_sort', 's' )]"
				tooltip = "POLITICAL_STRENGTH_TITLE"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
			sort_button = {
				visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 's')]"
				size = { 60 @pop_type_table_row_height}
				onclick = "[GetVariableSystem.Set('countrypanelmod_pop_type_table_sort', 's-' )]"
				tooltip = "POLITICAL_STRENGTH_TITLE"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
			widget = {
				size = { 88 @pop_type_table_row_height}
				sort_button = {
					size = { 100% 100% }
					enabled = no
					text = "COUNTRYPANELMOD_RADICALISM_HEADER"
					#tooltip = "COUNTRYPANELMOD_LOYALISTS_AND_RADICALS"
				}
				icon = {
					visible = no
					position = { 0 1 }
					size = { 26 26 }
					parentanchor = center
					alwaystransparent = yes	
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_radicalism.dds"
				}

			}


		}

		flowcontainer = {
			direction = vertical
			visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 't')]"
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					countrypanelmod_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('rich'))]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					countrypanelmod_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('middle'))]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					countrypanelmod_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('poor'))]"
					}
				}
			}
		}

		flowcontainer = {
			direction = vertical
			visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 't-')]"
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					countrypanelmod_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('poor'))]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					countrypanelmod_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('middle'))]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					countrypanelmod_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('rich'))]"
					}
				}
			}
		}



		dynamicgridbox = {
			visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 'p')]"
			datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPopulation]"
			item = {
				countrypanelmod_pop_type_row = {}
			}
		}

		dynamicgridbox = {
			visible = "[Or(GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 's'),Not(GetVariableSystem.Exists('countrypanelmod_pop_type_table_sort')))]"
			datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
			item = {
				countrypanelmod_pop_type_row = {}
			}
		}

		countrypanelmod_pop_type_table_reverse_pop = {
			visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 'p-' )]"
		}

		countrypanelmod_pop_type_table_reverse_str = {
			visible = "[GetVariableSystem.HasValue('countrypanelmod_pop_type_table_sort', 's-' )]"
		}
	}

	type countrypanelmod_pop_type_table_reverse_pop = flowcontainer {
		direction = vertical
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)14')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 14
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)13')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 13
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)12')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 12
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)11')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 11
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)10')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 10
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)9')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 9
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)8')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 8
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)7')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 7
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)6')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 6
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)5')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 5
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)4')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 4
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)3')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 3
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)2')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 2
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)1')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 1
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)0')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
				index = 0
			}
		}
	}

	type countrypanelmod_pop_type_table_reverse_str = flowcontainer {
		direction = vertical
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)14')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 14
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)13')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 13
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)12')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 12
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)11')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 11
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)10')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 10
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)9')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 9
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)8')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 8
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)7')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 7
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)6')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 6
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)5')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 5
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)4')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 4
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)3')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 3
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)2')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 2
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)1')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 1
			}
		}
		countrypanelmod_pop_type_row = {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)0')]"
			datacontext_from_model = {
				datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
				index = 0
			}
		}
	}

	type countrypanelmod_pop_type_row = flowcontainer {


		parentanchor = top

		widget = {
			size = { @pop_type_table_row_height @pop_type_table_row_height }

			background = {
				using = simple_frame
			}

			icon = {
				parentanchor = center
				texture = "/gfx/interface/piechart/piechart_legend.dds"
				position = { -0.5 -0.5 }
				size = { 24 24 }
				color = "[PopType.GetColor]"
			}
		}

		


		widget = {

			background = {
				margin_top = -2
				margin_bottom = -2
				visible = "[EqualTo_string(PopType.GetStrata,Localize('poor'))]"
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				color = { .42 .31 .28 1 }
				alpha = 0.5
			}
			background = {
				margin_top = -2
				margin_bottom = -2
				visible = "[EqualTo_string(PopType.GetStrata,Localize('middle'))]"
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				color = { .39 .46 .56 1 }
				alpha = 0.5
			}
			background = {
				margin_top = -2
				margin_bottom = -2
				visible = "[EqualTo_string(PopType.GetStrata,Localize('rich'))]"
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				color = { .58 .52 .40 1 }
				alpha = 0.5
			}


			size = { 120 @pop_type_table_row_height }
			background = {
				using = entry_bg_simple
			}

			textbox = {
				parentanchor = left|vcenter
				align = nobaseline
				position = { 6 0 }
				default_format = "#tooltippable_name"
				text = "[PopType.GetNameNoFormatting]"
				
				size = { 100% 100%}
				elide = right
				tooltipwidget = {
					countrypanelmod_FancyTooltip_PopType = {
					}
				}
			}

		}

		widget = {
			size = { 60 @pop_type_table_row_height }
			background = {
				using = entry_bg_simple
			}
			tooltip = "COUNTRYPANELMOD_POP_TYPE_POPULATION_TOOLTIP"

			textbox = {
				parentanchor = center
				align = center|nobaseline
				text = "[PopType.GetPopulation(Country.Self)|d]"
				autoresize = yes
			}
		}

		widget = {
			size = { 60 @pop_type_table_row_height }
			background = {
				using = entry_bg_simple
			}
			widget = {
				visible = "[GreaterThan_int64(PopType.GetPolStr(Country.Self),'(int64)0')))]"
				size = { 100% 100% }
				tooltip = "COUNTRYPANELMOD_POP_TYPE_POL_STR_TOOLTIP"
				textbox = {
					parentanchor = center
					align = center|nobaseline
					text = "[PopType.GetPolStrAsPercentage(Country.Self)|v/%d]"
					autoresize = yes
				}	
			}
			textbox = {
				visible = "[EqualTo_int64(PopType.GetPolStr(Country.Self),'(int64)0')))]"
				parentanchor = center
				align = center|nobaseline
				raw_text = "-"
				autoresize = yes
			}

		}
		
		widget = {
			size = { 88 @pop_type_table_row_height }
			tooltip = "COUNTRYPANELMOD_POP_TYPE_RADICALISM_TOOLTIP"

			background = {
				using = entry_bg_simple
			}

			countrypanelmod_radicalism_progressbar = {

				size = { 80 19 }
				position = { 4 4 }

				blockoverride "value_left" {
					min = 0
					max = 100
					value = "[CurrentAndMaxToProgressbarValueInt32(FixedPointToInt(IntToFixedPoint(PopType.GetRadicals(CountryPanel.AccessCountry.Self))),FixedPointToInt(IntToFixedPoint(PopType.GetPopulation(CountryPanel.AccessCountry.Self))))]"
				}
				blockoverride "value_right" {
					min = 0
					max = 100
					value = "[Subtract_float('(float)100', CurrentAndMaxToProgressbarValueInt32(FixedPointToInt(IntToFixedPoint(PopType.GetLoyalists(CountryPanel.AccessCountry.Self))),FixedPointToInt(IntToFixedPoint(PopType.GetPopulation(CountryPanel.AccessCountry.Self)))))]"
				}


			}
		}
	}

	type countrypanelmod_radicalism_progressbar = widget {
		size = { 300 40 }
		
		background = {
			texture = "gfx/interface/progressbar/progressbar_empty.dds"
			spriteType = Corneredtiled
			spriteborder = { 4 4 }
			texture_density = 2
			
			using = progressbar_texture_properties
		}
		
		### progressbar left
		widget = {

			size = { 100% 100% }
			scissor = yes
			
			progressbar = {
				### REVERSE HACK

				block "negative_textures" {
					progresstexture = "gfx/interface/progressbar/progressbar_bad.dds" 
					noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
				}
				
				size = { 100% 100% }
				spriteType = Corneredtiled
				spriteborder = { 4 4 }
				texture_density = 2
				skip_initial_animation = yes
				
				block "negative_min_max_values" {
					min = -1
					max = 0
				}

				block "value_left" {}
				
				blockoverride "glow" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}
				blockoverride "glow_line" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}


				direction = horizontal
				using = progressbar_texture_properties
			}
		}
		
		### progressbar right
		widget = {

			size = { 100% 100% }
			parentanchor = right
			scissor = yes
			
			progressbar = {

				block "positive_textures" {
					progresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
					noprogresstexture = "gfx/interface/progressbar/progressbar_green.dds"
				}
				
				size = { 100% 100% }
				spriteType = Corneredtiled
				spriteborder = { 4 4 }
				texture_density = 2
				skip_initial_animation = yes
				
				block "positive_min_max_values" {
					min = 0
					max = 1
				}

				block "value_right" {}
				
				direction = horizontal
				
				using = progressbar_marker_indicator

				blockoverride "glow" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}
				blockoverride "glow_line" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}
				
				using = progressbar_texture_properties
			}
		}	
		
		### frame
		widget = {

			size = { 100% 100% }
			
			background = {
				name = "frame"
				texture = "gfx/interface/progressbar/progressbar_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 6 6 }
				texture_density = 2
				margin = { 3 3 }
			}
		}
	}

	type countrypanelmod_FancyTooltip_PopType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "COUNTRYPANELMOD_POP_TYPE_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "[PopType.GetNameNoIcon]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}


}