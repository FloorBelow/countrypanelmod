# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@ig_table_row_height = 28

types countrypanelmod_politicspanel_types {
	type countrypanelmod_panel_politics_content = flowcontainer {
		datacontext = "[CountryPanel.AccessCountry]"
		using = default_list_position
		direction = vertical
		minimumsize = { @panel_width -1 }
		maximumsize = { @panel_width -1 }
		margin_top = 5


		button = {
			using = default_button
			texture = "gfx/interface/buttons/red_button_bg.dds"
			size = {65 120}
		}

		countrypanelmod_ig_header = {}


		#flowcontainer = {
		#	visible = "[Country.IsEnactingLaw]"
		#	countrypanelmod_enactment_widget = {}
		#}

		widget = {
			size = {5 5}
		}


		### LAWS
		default_header = {
			parentanchor = hcenter
			blockoverride "text" {
				text = LAWS
			}
		}

		widget = { size = { 5 1 } }
		
		countrypanelmod_laws_block = {}
		
		widget = { size = { 5 5 } }

		### MOVEMENTS
		default_header = {
			parentanchor = hcenter
			blockoverride "text" {
				text = POLITICAL_MOVEMENTS
			}
		}	

		widget = { size = { 5 5 } }
		
		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.AccessPoliticalMovements)]"
			}
			blockoverride "text" {
				text = "NO_POLITICAL_MOVEMENTS"
			}
		}	

		flowcontainer = {
			direction = vertical
			visible = "[Not(IsDataModelEmpty(Country.AccessPoliticalMovements))]"
			datamodel = "[Country.AccessPoliticalMovements]"
			parentanchor = hcenter
			spacing = 2		

			item = {
				countrypanelmod_political_movement_item = {}
			}
		}


		widget = { size = { 5 5 } }


		flowcontainer = {
			direction = vertical
			visible = "[Not(IsDataModelEmpty(Country.AccessPoliticalMovements))]"
			datamodel = "[Country.AccessPoliticalMovements]"
			parentanchor = hcenter
			spacing = 5		

			item = {
				country_panel_political_movement_item = {}
			}
		}


		widget = { size = { 40 400 } }


		textbox = {
			autoresize = yes
			#size = { 250 30 }
			text = "COUNTRY_GOVERNMENT_NO_LINE_BREAK"
			align = left
			elide = right
			#using = fontsize_small
		}

		widget = {
			size = {5 5}
		}


		#flowcontainer = {
		#	spacing = 10
		#	margin_left = 0
			#flowcontainer = {
			#	direction = vertical
			#	spacing = 10
				#countrypanelmod_ig_clout_chart = {}
				#countrypanelmod_ig_population_chart = {}
			#}
		#	countrypanelmod_ig_table = {}
		#	flowcontainer = {
		#		margin_top = 8
		#		direction = vertical
		#		#visible = "[Not(IsDataModelEmpty(Country.AccessPoliticalMovements))]"
		#		datamodel = "[Country.AccessPoliticalMovements]"
		#		spacing = 5		
		#
		#		item = {
		#			countrypanelmod_political_movement_item = {}
		#		}
		#	}
		#}


		### TOP INFO
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			minimumsize = { @panel_width -1 }
			margin = { 0 10 }
			spacing = 10
			
			using = main_bg

			background = {
				texture = "gfx/interface/illustrations/government/government_illustration.dds"
				alpha = 0.2
				fittype = center
				using = frame_small_mask
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_center.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
			
			textbox = {
				parentanchor = hcenter
				autoresize = yes
				size = { @panel_width 30 }
				text = "COUNTRY_GOVERNMENT_NO_LINE_BREAK"
				align = nobaseline
				elide = right
				using = fontsize_xl
			}

			flowcontainer = {
				spacing = 5
				parentanchor = hcenter
			
				### government					
				flowcontainer = {
					direction = vertical
					spacing = 5
					
					widget = {
						size = { 250 30 }
						parentanchor = hcenter
						
						background = {
							using = dark_area
							alpha = 0.35
						}
						
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5
							margin = { 10 0 }
						
							icon = {
								texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
								size = { 25 25 }
								tooltip = "[concept_in_government]"
							}	
							textbox = {
								layoutpolicy_horizontal = expanding
								text = "GOVERNMENT"
								align = left|nobaseline
								elide = right
								default_format = "#title"
							}
						}
					}
				
					fixedgridbox = {
						parentanchor = left
						datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInGovernment]"
						datamodel_wrap = 4
						addcolumn = 65
						addrow = 65
						flipdirection = yes
						
						item = {
							widget = {
								size = { 65 65 }
								
								flowcontainer = {
									parentanchor = bottom
									margin_left = 25
									direction = vertical
									tooltip = "CLOUT_PIECHART"
									
									widget = {
										size = { 36 36 }
										parentanchor = hcenter
										
										ig_button = {
											size = { 100% 100% }
											blockoverride "in_government_icon"{}
										}
									}
									textbox = {
										text = "[InterestGroup.GetClout|%1]"
										autoresize = yes
										parentanchor = hcenter
									}
								}
							}
						}
					}
				}
			
				vertical_divider_full = {}
			
				### opposition
				flowcontainer = {
					direction = vertical
					spacing = 5
					
					widget = {
						size = { 250 30 }
						parentanchor = hcenter
						
						background = {
							using = dark_area
							alpha = 0.35
						}
						
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5
							margin = { 10 0 }
						
							icon = {
								texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
								size = { 25 25 }
								tooltip = "[concept_in_opposition]"
							}	
							textbox = {
								layoutpolicy_horizontal = expanding
								text = "OPPOSITION"
								align = left|nobaseline
								elide = right
								default_format = "#title"
							}
						}
					}
					
					fixedgridbox = {
						parentanchor = left
						datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInOpposition]"
						datamodel_wrap = 4
						addcolumn = 65
						addrow = 65
						flipdirection = yes
						
						item = {
							widget = {
								size = { 65 65 }
								
								flowcontainer = {
									parentanchor = bottom
									margin_left = 25
									direction = vertical
									tooltip = "CLOUT_PIECHART"
									
									widget = {
										size = { 36 36 }
										parentanchor = hcenter
										
										ig_button = {
											size = { 100% 100% }
											blockoverride "in_government_icon"{}
										}
									}
									textbox = {
										text = "[InterestGroup.GetClout|%1]"
										autoresize = yes
										parentanchor = hcenter
									}
								}
							}
						}
					}
				}
			}			
		}

		
		widget = { size = { 10 10 } }

		flowcontainer = {
			countrypanelmod_ig_table2 = {}
			flowcontainer = {
				direction = vertical
				textbox = {
					parentanchor = left
					margin_left = 5
					autoresize = yes
					size = { @panel_width 30 }
					text = "COUNTRY_GOVERNMENT_NO_LINE_BREAK"
					align = nobaseline
					elide = right
					using = fontsize_xl
				}
				widget = {
					size = { 250 30 }
					countrypanelmod_legitimacy_item = {}
	
				}
	
		
			}
		}

		widget = {
			size = {5 5}
		}


	}

	type countrypanelmod_laws_block = flowcontainer {
		minimumsize = { @panel_width -1 }
		direction = vertical

		flowcontainer = {
			direction = horizontal
			
			textbox = {
				size = { 180 25 }
				align = center|nobaseline
				using = fontsize_large
				fontsize_min = 14
				
				text = "POWER_STRUCTURE"
			}		
			
			textbox = {
				size = { 180 25 }
				align = center|nobaseline
				using = fontsize_large
				fontsize_min = 14
				
				text = "ECONOMY"
			}
			
			textbox = {
				size = { 180 25 }
				align = center|nobaseline
				using = fontsize_large
				fontsize_min = 14
				
				text = "HUMAN_RIGHTS"
			}			
		}

		widget = { size = { 5 3 } }
		
		flowcontainer = {
			parentanchor = hcenter
			direction = horizontal
			spacing = 5
			
			flowcontainer = {
				direction = vertical
				visible = "[Not(IsDataModelEmpty(Country.AccessActivePowerStructureLaws))]"
				datamodel = "[Country.AccessActivePowerStructureLaws]"
				parentanchor = hcenter
				spacing = 3

				item = {
					countrypanelmod_law_item_container = {
						visible = "[Not(And(Country.IsEnactingLaw,EqualTo_string(Law.GetName,Country.GetLawBeingEnacted.GetActiveGroupLaw.GetName)))]"
					}
				}
			}

			vertical_divider_full = {}
			
			flowcontainer = {
				direction = vertical
				visible = "[Not(IsDataModelEmpty(Country.AccessActiveEconomyLaws))]"
				datamodel = "[Country.AccessActiveEconomyLaws]"
				parentanchor = hcenter
				spacing = 3

				item = {
					countrypanelmod_law_item_container = {
						visible = "[Not(And(Country.IsEnactingLaw,EqualTo_string(Law.GetName,Country.GetLawBeingEnacted.GetActiveGroupLaw.GetName)))]"

						#blockoverride "size" {
						#	size = { 170 43 }
						#}
					}
				}
				
				background = {
					using = light_bg
					alpha = 0.5
					margin = { 5 0 }
					
					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						blend_mode = alphamultiply
					}
				}
			}

			vertical_divider_full = {}			
			
			flowcontainer = {
				direction = vertical
				visible = "[Not(IsDataModelEmpty(Country.AccessActiveHumanRightsLaws))]"
				datamodel = "[Country.AccessActiveHumanRightsLaws]"
				parentanchor = hcenter
				spacing = 3

				item = {
					countrypanelmod_law_item_container = {
						visible = "[Not(And(Country.IsEnactingLaw,EqualTo_string(Law.GetName,Country.GetLawBeingEnacted.GetActiveGroupLaw.GetName)))]"
					}
				}
			}			
		}			

	}

	type countrypanelmod_ig_header = flowcontainer {
		margin_top = 5
		margin_bottom = 10
		parentanchor = hcenter
		direction = vertical
		minimumsize = { 535 -1 }
		#spacing = 10
		
		background = {
			using = entry_bg_simple
		}

		background = {
			texture = "gfx/interface/illustrations/government/government_illustration.dds"
			alpha = 0.2
			fittype = centercrop
			using = frame_small_mask
			
			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_center.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}

			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_center.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}
		}
		
		textbox = {
			parentanchor = hcenter
			margin_left = 20
			autoresize = yes
			text = "COUNTRY_GOVERNMENT_NO_LINE_BREAK"
			align = nobaseline
			elide = right
			using = fontsize_xl
		}
		widget = {
			size = { 5 5 }
		}


		flowcontainer = {
			parentanchor = hcenter
		
			dynamicgridbox = {
				#background = {
				#	using = light_bg
				#}
					
				parentanchor = left
				datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInGovernment]"
				flipdirection = yes
				
				item = {
					countrypanelmod_ig_header_widget2 = {}
				}
			}
		
			widget = {
				size = { 10 10 }
			}
		
			dynamicgridbox = {
				parentanchor = left
				datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInOpposition]"
				flipdirection = yes
				item = {
					countrypanelmod_ig_header_widget2 = {}
				}
			}

			#dynamicgridbox = {
			#	parentanchor = left
			#	datamodel = "[CountryPanel.AccessCountry.AccessMarginalInterestGroups]"
			#	flipdirection = yes
			#	item = {
			#		countrypanelmod_ig_header_widget = {}
			#	}
			#}

		}			
	}

	type TODO_remove_holding_zone = widget {
		
		#DIVIDER
		widget = {
			size = { 0 100% }
			icon = {
				parentanchor = center
				size = { 2 100% }
				texture = "gfx/interface/dividers/divider_clean_vertical.dds"
				texture_density = 2
				alpha = 0.6
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_center.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					alpha = 0.6
				}
			}		
		}


		widget = {
			size = { 30 30 }
			parentanchor = hcenter
			
			background = {
				using = dark_area
				alpha = 0.35
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5
				margin = { 10 0 }
			
				icon = {
					texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
					size = { 25 25 }
					tooltip = "[concept_in_government]"
				}	
				textbox = {
					layoutpolicy_horizontal = expanding
					text = "GOVERNMENT"
					align = left|nobaseline
					elide = right
					default_format = "#title"
				}
			}
		}


		widget = {
			size = { 30 30 }
			parentanchor = hcenter
			
			background = {
				using = dark_area
				alpha = 0.35
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5
				margin = { 10 0 }
			
				icon = {
					texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
					size = { 25 25 }
					tooltip = "[concept_in_opposition]"
				}	
				textbox = {
					layoutpolicy_horizontal = expanding
					text = "OPPOSITION"
					align = left|nobaseline
					elide = right
					default_format = "#title"
				}
			}
		}

	}

	type countrypanelmod_ig_header_widget = widget {
		size = { 65 105 }
		background = {
			visible = "[InterestGroup.IsInGovernment]"
			texture = "gfx/interface/backgrounds/entry_bg_top_mask.dds"  
			spriteType = Corneredtiled
			spriteborder = { 12 12 }
			texture_density = 2
			color = "[InterestGroup.GetColor]"
			#color = {0.5 0.5 0.5 0.5}


			#texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			#alpha = "[Min_float(Multiply_float(FixedPointToFloat(InterestGroup.GetClout),'(float)2'),'(float)0.4')]"
			alpha = 0.45
			modify_texture = {
				texture = "gfx/interface/backgrounds/gradient_overlay.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				alpha = 0.8
				blend_mode = multiply
			}

			modify_texture = {
				
				texture = "gfx/interface/textures/velvet_texture.dds"
				spriteType = Corneredtiled
				texture_density = 1
				spriteborder = { 0 0 }
				blend_mode = overlay
					
			}

	
			#modify_texture = {
			#	texture = "gfx/interface/masks/fade_vertical_bottom.dds"
			#	spriteType = Corneredstretched
			#	spriteborder = { 0 0 }
			#	blend_mode = alphamultiply
			#	alpha = 0.5
			#}
	
		}

		background = {
			visible = "[InterestGroup.IsInGovernment]"
			using = simple_frame
		}


		flowcontainer = {
			parentanchor = center
			direction = vertical
			tooltip = "CLOUT_PIECHART"
			
			widget = {
				size = { 36 36 }
				parentanchor = hcenter
				
				ig_button = {
					size = { 100% 100% }
					blockoverride "in_government_icon"{}
				}
			}
			textbox = {
				margin_left = 5
				visible = "[InterestGroup.IsPowerful]"
				text = "[InterestGroup.GetClout|%1v]"
				autoresize = yes
				parentanchor = hcenter
			}
			textbox = {
				margin_left = 5
				visible = "[Not(InterestGroup.IsPowerful)]"
				text = "[InterestGroup.GetClout|%1]"
				autoresize = yes
				parentanchor = hcenter
			}
			textbox = {
				margin_right = 5
				visible = "[And(LessThan_int32(InterestGroup.GetApprovalValue,'(int32)5'),GreaterThan_int32(InterestGroup.GetApprovalValue,'(int32)-5'))]"
				text = "[InterestGroup.GetApprovalValue|=1]"
				autoresize = yes
				parentanchor = hcenter
			}
			textbox = {
				margin_right = 5
				visible = "[GreaterThanOrEqualTo_int32(InterestGroup.GetApprovalValue,'(int32)5')]"
				text = "[InterestGroup.GetApprovalValue|=p]"
				autoresize = yes
				parentanchor = hcenter
			}
			textbox = {
				margin_right = 5
				visible = "[LessThanOrEqualTo_int32(InterestGroup.GetApprovalValue,'(int32)-5')]"
				text = "[InterestGroup.GetApprovalValue|n]"
				autoresize = yes
				parentanchor = hcenter
			}
		}
	}

	type countrypanelmod_ig_header_widget2 = widget {
		size = { 65 125 }
		background = {
			#visible = "[InterestGroup.IsInGovernment]"
			texture = "gfx/interface/backgrounds/entry_bg_top_mask.dds"  
			spriteType = Corneredtiled
			spriteborder = { 12 12 }
			texture_density = 2
			color = "[InterestGroup.GetColor]"

			alpha = 0.7



			#texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			#alpha = "[Min_float(Multiply_float(FixedPointToFloat(InterestGroup.GetClout),'(float)2'),'(float)0.4')]"
			modify_texture = {
				texture = "gfx/interface/backgrounds/gradient_overlay.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				alpha = 0.6
				blend_mode = multiply
			}

			modify_texture = {
				texture = "gfx/interface/backgrounds/gradient_overlay.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				alpha = 0.1
				blend_mode = add
			}

			modify_texture = {
				
				texture = "gfx/interface/textures/velvet_texture.dds"
				spriteType = Corneredtiled
				texture_density = 1
				spriteborder = { 0 0 }
				blend_mode = overlay
				alpha = 1
					
			}

	
			#modify_texture = {
			#	texture = "gfx/interface/masks/fade_vertical_bottom.dds"
			#	spriteType = Corneredstretched
			#	spriteborder = { 0 0 }
			#	blend_mode = alphamultiply
			#	alpha = 0.5
			#}
	
		}

		background = {
			#visible = "[InterestGroup.IsInGovernment]"
			using = simple_frame
		}

		


		icon = {
			size = { 65 65 }
			texture = "[InterestGroup.GetTexture]"
			parentanchor = bottom
			alpha = 0.25
		}

		widget = {
			size = { 65 32 }
			scissor = yes
			visible = "[InterestGroup.IsPowerful]"

			parentanchor = bottom
			icon = {
				parentanchor = hcenter|bottom
				position = { 0 -2 }
				size = { 61 61 }
				alpha = 0.9
				texture = "gfx/interface/icons/ig_icons/influential_ig_frame.dds"
				alwaystransparent = yes
			}	
		}

		widget = {
			size = { 65 32 }
			scissor = yes
			visible = "[InterestGroup.IsPowerful]"

			icon = {
				parentanchor = hcenter|top
				position = { 0 2 }
				size = { 61 61 }
				alpha = 0.9
				texture = "gfx/interface/icons/ig_icons/influential_ig_frame.dds"
				alwaystransparent = yes
			}	
		}



		flowcontainer = {
			parentanchor = center
			direction = vertical
			tooltip = "CLOUT_PIECHART"
			
			widget = {
				size = { 70 50 }
				datacontext = "[InterestGroup.AccessLeader]"

				character_portrait_base_head = {

					
					size = { 66 66 }
					blockoverride "portrait_size" {
						size = { 66 75 }
					}
					position = { 2 -14 }
	
					blockoverride "frame_texture_generated" {
						texture = "gfx/interface/portraits/portrait_frame_head_small.dds"
					}
					blockoverride "frame_texture_historical" {
						texture = "gfx/interface/portraits/portrait_frame_head_small_historical.dds"
					}
			

					blockoverride "portrait_button_onrightclick" {}
					#blockoverride "tooltip" {}
					blockoverride "rank_icon" {}
					blockoverride "portrait_icons" {}
					blockoverride "show_hat" {}
			
			
					#character_ig_icon = {
					#	parentanchor = bottom|right
					#	size = { 30 30 }
					#	blockoverride "tooltip" {}
					#}
				}
				icon = {
					parentanchor = bottom|right
					size = { 28 28 }
					position = { -4 4 }
					datacontext = "[Character.GetIdeology]"
					texture = "[Ideology.GetTexture]"
					tooltipwidget = {
						FancyTooltip_Ideology = {}
					}
				}

			}


			#widget = {
			#	size = { 36 36 }
			#	parentanchor = hcenter
			#	
			#	ig_button = {
			#		size = { 100% 100% }
			#		blockoverride "in_government_icon"{}
			#	}
			#}
			textbox = {

				background = {
					using = dark_area
					margin_top = -3
					margin_bottom = 1
					alpha = 0.2

					modify_texture = {
						texture = "gfx/interface/masks/fade_horizontal_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}
				}


				margin_left = 5
				#visible = "[InterestGroup.IsPowerful]"
				text = "[InterestGroup.GetClout|%1v]"
				autoresize = yes
				parentanchor = hcenter|nobaseline
			}
			textbox = {
				background = {
					using = dark_area
					margin_top = -3
					margin_bottom = 1
					alpha = 0.3

					modify_texture = {
						texture = "gfx/interface/masks/fade_horizontal_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}
				}

				margin_right = 5
				visible = "[GreaterThanOrEqualTo_int32(InterestGroup.GetApprovalValue,'(int32)5')]"
				text = "[InterestGroup.GetApprovalValue|=p]"
				autoresize = yes
				parentanchor = hcenter
			}

			textbox = {

				background = {
					using = dark_area
					margin_top = -3
					margin_bottom = 1
					alpha = 0.3
					modify_texture = {
						texture = "gfx/interface/masks/fade_horizontal_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}
					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}
				}

				margin_right = 5
				visible = "[And(LessThan_int32(InterestGroup.GetApprovalValue,'(int32)5'),GreaterThan_int32(InterestGroup.GetApprovalValue,'(int32)-5'))]"
				text = "[InterestGroup.GetApprovalValue|=1v]"
				autoresize = yes
				parentanchor = hcenter
			}


			textbox = {

				background = {
					using = dark_area
					margin_top = -3
					margin_bottom = 1
					alpha = 0.3
					modify_texture = {
						texture = "gfx/interface/masks/fade_horizontal_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}
					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}
				}


				margin_right = 5
				visible = "[LessThanOrEqualTo_int32(InterestGroup.GetApprovalValue,'(int32)-5')]"
				text = "[InterestGroup.GetApprovalValue|n]"
				autoresize = yes
				parentanchor = hcenter
			}
		}
	}
	

	type countrypanelmod_ig_clout_chart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[CountryPanel.AccessCountry.AccessActiveInterestGroups]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopCulturesSortedByPopulation), '(int32)3')]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.AccessActiveInterestGroups)]"
			}
			blockoverride "text" {
				text = "NO_CULTURES"
			}
		}

		blockoverride "heading" {
			text = "CLOUT_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "IG_CLOUT_PIECHART"
		}

		blockoverride "pieslice" {
			value = "[FixedPointToFloat(InterestGroup.GetClout)]"
		}

		blockoverride "color" {
			color = "[InterestGroup.GetColor]"
		}
		
		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}

		blockoverride "leftside_info" {
			text = "[InterestGroup.GetName]"
		}

		blockoverride "rightside1_info" {
			text = ""
		}

		blockoverride "rightside2_info" {
			text = "[InterestGroup.GetClout|%v]"
		}
	}

	type countrypanelmod_ig_population_chart = countrypanelmod_smallchart {
		blockoverride "datamodel" {
			datamodel = "[CountryPanel.AccessCountry.AccessActiveInterestGroups]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopCulturesSortedByPopulation), '(int32)3')]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.AccessActiveInterestGroups)]"
			}
			blockoverride "text" {
				text = "NO_CULTURES"
			}
		}

		blockoverride "heading" {
			text = "POPULATION_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "IG_CLOUT_PIECHART"
		}

		blockoverride "pieslice" {
			value = "[InterestGroup.GetPopulationAsFloat]"
		}

		blockoverride "color" {
			color = "[InterestGroup.GetColor]"
		}
		
		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}

		blockoverride "leftside_info" {
			text = "[InterestGroup.GetName]"
		}

		blockoverride "rightside1_info" {
			text = ""
		}

		blockoverride "rightside2_info" {
			text = "[InterestGroup.GetClout|%v]"
		}
	}




	type countrypanelmod_ig_table2 = flowcontainer {
		
		direction = vertical

		#widget = { size = {5 5} }

		dynamicgridbox = {
			datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInGovernment]"
			item = {
				countrypanelmod_ig_row2 = {}
			}
		}

		widget = {
			size = { 5 5 }
		}

		divider_clean = {
			parentanchor = hcenter
			size = { 140 3 }
		}

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInOpposition]"
			item = {
				countrypanelmod_ig_row2 = {}
			}
		}
		dynamicgridbox = {
			datamodel = "[CountryPanel.AccessCountry.AccessMarginalInterestGroups]"
			item = {
				countrypanelmod_ig_row2 = {}
			}
		}
	}


	type countrypanelmod_ig_table = flowcontainer {
		
		direction = vertical

		widget = { size = {5 5} }

		dynamicgridbox = {
			datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInGovernment]"
			item = {
				countrypanelmod_ig_row = {}
			}
		}

		widget = {
			size = { 5 5 }
		}

		divider_clean = {
			parentanchor = hcenter
			size = { 170 3 }
		}

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInOpposition]"
			item = {
				countrypanelmod_ig_row = {}
			}
		}
		dynamicgridbox = {
			datamodel = "[CountryPanel.AccessCountry.AccessMarginalInterestGroups]"
			item = {
				countrypanelmod_ig_row = {}
			}
		}
	}

	type countrypanelmod_ig_row2 = flowcontainer {
		margin_bottom = 2
		tooltip = "CLOUT_PIECHART"
		widget = {
			size = { 5 5 }
		}

		widget = {
			size = { 38 36 }
			
			ig_button = {
				position = { 0 1 }
				size = { 36 36 }
				blockoverride "in_government_icon"{}
			}
		}



		flowcontainer = {
			parentanchor = vcenter

			background = {
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				color = "[InterestGroup.GetColor]"
				alpha = "[Min_float(Multiply_float(FixedPointToFloat(InterestGroup.GetClout),'(float)2'),'(float)0.4')]"
				#alpha = 0.5
			}

			widget = {
				size = { 55 36 }
				background = {
					using = entry_bg_simple
				}
				textbox = {
					visible = "[InterestGroup.IsPowerful]"
					parentanchor = center
					align = center|nobaseline
					text = "[InterestGroup.GetClout|%1v]"
					autoresize = yes
				}
				textbox = {
					visible = "[Not(InterestGroup.IsPowerful)]"
					parentanchor = center
					align = center|nobaseline
					text = "[InterestGroup.GetClout|%1]"
					autoresize = yes
				}

			}

			#widget = {
			#	size = { 55 @ig_table_row_height }
			#	background = {
			#		using = entry_bg_simple
			#	}
			#	textbox = {
			#		parentanchor = center
			#		align = center|nobaseline
			#		text = "[InterestGroup.GetPopulation|d]"
			#		autoresize = yes
			#	}
			#}

			widget = {
				size = { 40 36 }
				background = {
					using = entry_bg_simple
				}

				textbox = {
					parentanchor = center
					align = center|nobaseline
					text = "[InterestGroup.GetApprovalValue|=+]"
					autoresize = yes
				}
			}

		}

	
}


	type countrypanelmod_ig_row = flowcontainer {
			tooltip = "CLOUT_PIECHART"
			
			widget = {
				size = { 34 32 }
				
				ig_button = {
					size = { 32 32 }
					blockoverride "in_government_icon"{}
				}
			}

			flowcontainer = {
				parentanchor = vcenter

				background = {
					texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
					color = "[InterestGroup.GetColor]"
					alpha = "[Min_float(Multiply_float(FixedPointToFloat(InterestGroup.GetClout),'(float)2'),'(float)0.4')]"
					#alpha = 0.5
				}

				widget = {
					size = { 55 @ig_table_row_height }
					background = {
						using = entry_bg_simple
					}
					textbox = {
						visible = "[InterestGroup.IsPowerful]"
						parentanchor = center
						align = center|nobaseline
						text = "[InterestGroup.GetClout|%1v]"
						autoresize = yes
					}
					textbox = {
						visible = "[Not(InterestGroup.IsPowerful)]"
						parentanchor = center
						align = center|nobaseline
						text = "[InterestGroup.GetClout|%1]"
						autoresize = yes
					}
	
				}
	
				#widget = {
				#	size = { 55 @ig_table_row_height }
				#	background = {
				#		using = entry_bg_simple
				#	}
				#	textbox = {
				#		parentanchor = center
				#		align = center|nobaseline
				#		text = "[InterestGroup.GetPopulation|d]"
				#		autoresize = yes
				#	}
				#}
	
				widget = {
					size = { 40 @ig_table_row_height }
					background = {
						using = entry_bg_simple
					}
	
					textbox = {
						parentanchor = center
						align = center|nobaseline
						text = "[InterestGroup.GetApprovalValue|=+]"
						autoresize = yes
					}
				}
	
				widget = {
					size = { 68 @ig_table_row_height }
					
					background = {
						using = entry_bg_simple
					}
	
					countrypanelmod_radicalism_progressbar = {
						size = { 60 19 }
						position = { 4 4 }
	
						blockoverride "value_left" {
							min = 0
							max = 100
							value = "[CurrentAndMaxToProgressbarValueInt32(InterestGroup.GetNumRadicals, InterestGroup.GetPopulation)]"
						}
						blockoverride "value_right" {
							min = 0
							max = 100
							value = "[Subtract_float('(float)100', CurrentAndMaxToProgressbarValueInt32(InterestGroup.GetNumLoyalists, InterestGroup.GetPopulation))]"
						}
	
	
					}
				}
	
			}

		
	}

	type countrypanelmod_law_item_container = widget {
		block "size" {
			size = { 170 55 }
		}

		countrypanelmod_law_item = {
			visible = "[Not(And(Country.IsEnactingLaw,EqualTo_string(Law.GetName,Country.GetLawBeingEnacted.GetName)))]"
		}
		countrypanelmod_enacting_law_item = {
			visible = "[And(Country.IsEnactingLaw,EqualTo_string(Law.GetName,Country.GetLawBeingEnacted.GetName))]"
		}
	}

	type countrypanelmod_law_item = widget {
		size = { 100% 100% }
		
		background = {
			using = entry_bg_simple
		}		

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin = { 8 0 }
		
			flowcontainer = {
				direction = vertical
				spacing = 1
				icon = {
					size = { 40 40 }
					texture = "[Law.GetTexture]"			
				}
				countrypanelmod_institution_level_dots = {
					visible = "[Law.HasInstitution]"
				}
			}
			
			textbox = {
				layoutpolicy_horizontal = expanding
				align = center|nobaseline
				fontsize_min = 10
				multiline = yes
				
				text = "[Law.GetName]"
			}
		}
	}

	type countrypanelmod_enacting_law_item = widget {
		size = { 100% 100% }
		
		background = {
			using = entry_bg_simple_colored
		}		

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin = { 8 0 }
		
			flowcontainer = {
				direction = vertical
				spacing = 2
				countrypanelmod_law_change_icon = {}
				countrypanelmod_institution_level_dots = {
					visible = "[Law.HasInstitution]"
				}
			}
			
			textbox = {
				layoutpolicy_horizontal = expanding
				align = center|nobaseline
				fontsize_min = 10
				multiline = yes
				
				text = "COUNTRYPANELMOD_LAW_CHANGE"
			}

		}

		widget = {
			size = { 100% 100% }
			
			tooltipwidget = {
				FancyTooltip_Law = {}
			}
		}
	}
	
	type countrypanelmod_law_change_icon = widget {
		size = {40 40}
		widget = {
			size = {20 40}
			scissor = yes

			icon = {
				size = { 40 40 }
				position = { 10 0 }
				parentanchor = center
				texture = "[Law.GetActiveGroupLaw.GetTexture]"
			}
		}

		widget = {

			position = { 20 0 }

			size = {20 40}
			scissor = yes

			icon = {
				size = { 40 40 }
				position = { -10 0 }
				parentanchor = center
				texture = "[Law.GetTexture]"
			}
		}

		icon = {
			size = { 1 40 }
			position = { 0 0 }
			parentanchor = center
			texture = "gfx/interface/dividers/divider_clean_vertical.dds"
		}

	}

	type countrypanelmod_institution_level_dots = widget {
		size = { 40 10 }
		datamodel = "[CountryPanel.AccessCountry.AccessInstitutions]"
		item = {
			flowcontainer = {
				parentanchor = center
				visible = "[EqualTo_string(Law.GetInstitutionType.GetNameNoFormatting,Institution.GetNameNoFormatting)]"
				countrypanelmod_institution_level_dot = {
					visible = "[GreaterThanOrEqualTo_int32(Institution.GetInvestmentLevel,'(int32)1')]"
				}
				countrypanelmod_institution_level_dot = {
					visible = "[GreaterThanOrEqualTo_int32(Institution.GetInvestmentLevel,'(int32)2')]"
				}
				countrypanelmod_institution_level_dot = {
					visible = "[GreaterThanOrEqualTo_int32(Institution.GetInvestmentLevel,'(int32)3')]"
				}
				countrypanelmod_institution_level_dot = {
					visible = "[GreaterThanOrEqualTo_int32(Institution.GetInvestmentLevel,'(int32)4')]"
				}
				countrypanelmod_institution_level_dot = {
					visible = "[GreaterThanOrEqualTo_int32(Institution.GetInvestmentLevel,'(int32)5')]"
				}	
			}	
		}
	}


	type countrypanelmod_institution_level_dot = widget {
		size = { 8 8 }
		background = {
			using = simple_frame
		}
		
		icon = {
			parentanchor = center
			size = { 5 5 }
			texture = "gfx/interface/piechart/piechart.dds"
			color = { 1.0 0.8 0.64 1.0}	
		}
		#texture = "gfx/interface/icons/institution_icons/institution_icon_bg.dds"
	}


	type countrypanelmod_legitimacy_item = vbox {
		margin = { 5 0 }
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		spacing = 5

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			datacontext = "[Country]"
			tooltip = "COUNTRYPANELMOD_LEGITIMACY_LEVEL_ACTIVE_TOOLTIP"
			
			textbox = {
				autoresize = yes
				text = "[Country.GetGovernmentLegitimacyLevel.GetNameNoFormatting|v]"
				align = left|nobaseline
				elide = right
			}
			textbox = {
				layoutpolicy_horizontal = expanding
				size = { 0 20 }
				raw_text = "#variable [Country.GetGovernmentLegitimacy]#!"
				align = left|nobaseline
				elide = right
			}
		}
		
		levels_progressbar = {
			datamodel = "[GetLegitimacyLevels]"
			
			blockoverride "item_properties" {
				layoutstretchfactor_horizontal = "[LegitimacyLevel.GetWidth]"
				tooltip = "[SelectLocalization( LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy ), 'LEGITIMACY_LEVEL_ACTIVE_TOOLTIP', 'LEGITIMACY_LEVEL_INACTIVE_TOOLTIP' )]"
			}
			blockoverride "level_active" {
				visible = "[LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy )]"
			}
			blockoverride "last_level" {
				visible = "[Not(EqualTo_int32( LegitimacyLevel.GetUpperBound, '(int32)100' ))]"
			}
			blockoverride "default_progressbar_value" {
				value = "[LegitimacyLevel.GetProgress( Country.GetGovernmentLegitimacy )]"
			}
		}
	}

	type countrypanelmod_political_movement_item = flowcontainer {
		direction = vertical

		onmousehierarchyenter = "[AccessHighlightManager.HighlightPoliticalMovement(PoliticalMovement.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		tooltipwidget = {
			FancyTooltip_PoliticalMovement = {}
		}

		###NORMAL NON-REVOLUTIONARY MOVEMENT###
		widget = {
			size = { 535 68 }
			#visible = "[Not(PoliticalMovement.IsRevolutionary)]"


			button = {
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
				using = default_button
				parentanchor = center

				#vfx = {
				#	position = { 200 4 }
				#	size = { 1000 125 }
				#	blockoverride "entity_instance" {
				#		entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
				#	}	
				#	alpha = 0.3
				#}
	


				hbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 10
					margin_right = 10
					spacing = 5

					widget = {
						layoutpolicy_horizontal = fixed
						size = { 50 50 }

						icon = {
							visible = "[PoliticalMovement.IsRevolutionary]"
							using = rotate_glow_animation_02
							blockoverride "rotate_animation_texture" {
								texture = "gfx/interface/animation/color_bad.dds"
							}
							size = { 250% 250% }
							parentanchor = center
						}


						icon = {
							size = { 100% 100% }
							texture = "[PoliticalMovement.GetLaw.GetTexture]"			
						}
	

					}


					vbox = {
						margin_top = 7

						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = fixed
	
							textbox = {
								margin_left = 5
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								align = left|nobaseline
								elide = right
								fontsize_min = 12
	
								background = {
									using = dark_area
									alpha = 0.3
									margin_left = 20
									
									#margin_bottom = 6
									#margin_top = 4
									
									modify_texture = {
										texture = "gfx/interface/masks/fade_horizontal_center.dds"
										blend_mode = alphamultiply
									}
								}
								
								text = "[PoliticalMovement.GetName]"	
							}
	
							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
							}
		
	
						}
	
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							#margin = { 10 0 }
	
							### Characters ###
							flowcontainer = {
								layoutpolicy_horizontal = fixed



								visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters))]"
								#margin_left = 5
								#margin_bottom = 7
								spacing = 3
	
								dynamicgridbox = {
									datamodel = "[PoliticalMovement.GetTopSupportingCharacters]"
									flipdirection = yes
	
									item = {
										character_portrait_mini = {
	
											blockoverride "portrait_button_onrightclick" {}
	
											blockoverride "tooltip" {}
	
											character_ig_icon = {
												parentanchor = bottom|right
												size = { 12 12 }
	
												blockoverride "tooltip" {}
											}
										}
									}
								}
	
								textbox = {
									autoresize = yes
									visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetBottomSupportingCharacters))]"
									size = { 0 30 }
									align = right|nobaseline
									text = "AGITATORS_IN_QUEUE"
									fontsize_min = 12
									tooltip = "[PoliticalMovement.GetBottomSupportingCharactersDesc]"
								}
							}

							widget = {
								size = { 3 3 }
							}
	
							### Interest Groups
							flowcontainer = {

								parentanchor = left

								visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingInterestGroups))]"
								datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"
								#spacing = 3
								item = {
									ig_button = {
										size = { 30 30 }
										
										tooltipwidget = {
											FancyTooltip_IG = {}
										}
									}
								}
							}

							textbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(Or(PoliticalMovement.IsPlacated,PoliticalMovement.IsRevolutionary))]"
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
							}
		
							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								
								visible = "[And(PoliticalMovement.IsPlacated,Not(PoliticalMovement.IsRevolutionary))]"
								text = "[concept_political_movement_placated]"
							}

							expand = {
								visible = "[PoliticalMovement.IsRevolutionary]"
							}

							### REVOLUTION PROGRESSBAR ###
							widget = {
								visible = "[PoliticalMovement.IsRevolutionary]"
								size = { 230 25 }
								
								bad_progressbar_horizontal = {
									datacontext = "[PoliticalMovement.GetRevolution]"
									size = { 230 25 }

									tooltip = "REVOLUTIONS_PROGRESS_TOOLTIP"
									using = tooltip_below

									blockoverride "values" {
										value = "[FixedPointToFloat( PoliticalMovement.GetRevolution.GetProgress )]"
										min = 0
										max = 1
									}

									flowcontainer = {
										parentanchor = vcenter
										margin_left = 10
										spacing = 7

										### revolution header
										textbox = {
											text = "REVOLUTIONS_HEADER"
											align = nobaseline
											autoresize = yes
										}
									}

									textbox = {
										text = "[PoliticalMovement.GetRevolution.GetProgress|%0v]"
										autoresize = yes
										align = nobaseline
										parentanchor = right|vcenter
										margin_right = 35
									}
									
									blockoverride "in_government_icon" {}

									icon = {
										parentanchor = right|vcenter
										size = { 25 25 }
										texture = "gfx/interface/icons/politics_icons/radicalized.dds"
										position = { -5 0 }
									}
								}
							}
							
		

						}


					}

	
				}

				vbox = {
					visible = no
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					parentanchor = center
					margin_right = 10



				}


			}
			

		}
	}


}